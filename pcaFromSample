/*  
    Copyright 2024 Greg Peargin
    
    Use of this source code is governed by an MIT-style
    license that can be found in the LICENSE file or at
    https://opensource.org/licenses/MIT.
*/

/*
    Adapted in part from:
    https://developers.google.com/earth-engine/guides/arrays_eigen_analysis
    
    'getNewBandNames' is from users/gena/packages:utils.PCA
*/

/*
    'pcaFromSample' transforms an image into its principal
    components using only a sample of pixels instead of 
    all of the pixels in a region. This speeds up PCA, but
    the bands of the resulting image will be slightly
    correlated. 'pcaFromSample' performs mean-centering
    internally, so images can be supplied as-is, along with
    a dictionary of arguments to pass to ee.Image.sample().
    
    'pcaFromSample2' gives the user the option of performing
    PCA in multiple steps in order to access intermediate
    outputs. 'getSampleArrays' takes the same arguments as
    'pcaFromSample' and produces a dictionary with keys
    'meanVector' and 'covarianceMatrix', which are supplied
    to 'getCenteredImage' and 'getSampleEigens', respectively.
    The centered image and dictionary with keys 'eigenValues'
    and 'eigenVectors' must then be provided to 'pcaFromSample2' 
    to produce the transformed image.
    
    Finally, 'getSampleCorrelation' allows the user to estimate
    the correlation between bands. Its only argument is the
    covariance matrix obtained from 'getSampleArrays'.
*/

var getSampleMatrix = function(image, Dict) {
  var sample = image.sample(Dict);
  var sampleSize = sample.size();
  var numBands = sample
    .first()
    .toDictionary()
    .keys()
    .length();
  var sampleList = sample
    .toList(sampleSize)
    .map(function(feature){
      return ee.Feature(feature)
        .toArray(sample.get('band_order'));
    });
  var sampleMatrix = ee.Array.cat(sampleList, 1)
    .transpose();
  return sampleMatrix
};

var findOutliers = function(sampleMatrix) {
  var nRows = sampleMatrix.length().get([0])
  var nCols = sampleMatrix.length().get([1])
  var sampleMatrixReshape = sampleMatrix.reshape([
    nRows, nCols, 1])
  var sampleQuartiles = sampleMatrixReshape.reduce(ee.Reducer.percentile([25, 75]), [0], 2)
  var pc25 = sampleQuartiles.slice(2, 0, 1).project([1])
  var pc75 = sampleQuartiles.slice(2, 1, 2).project([1])
  var sampleIQR = pc75.subtract(pc25)
  var upperLim = pc75.add(
    ee.Array(1.5).repeat(0, sampleIQR.length().get([0])).multiply(sampleIQR))
  var lowerLim = pc25.subtract(
    ee.Array(1.5).repeat(0, sampleIQR.length().get([0])).multiply(sampleIQR))
  return ee.Dictionary({
    lower: lowerLim,
    upper: upperLim
  })
}

var maskOutliers = function(image, limits) {
  var lteImage = ee.ImageCollection.fromImages(
    ee.List.sequence(0, image.bandNames().size().subtract(1)).map(function(band) {
    return image.select([band]).lte(limits.getArray('upper').get([band]))
  })).toBands()
  var gteImage = ee.ImageCollection.fromImages(
    ee.List.sequence(0, image.bandNames().size().subtract(1)).map(function(band) {
    return image.select([band]).gte(limits.getArray('lower').get([band]))
  })).toBands()
  var maskedImage = image.updateMask(lteImage.and(gteImage))
  return maskedImage
}

var getSampleMean = function(sampleMatrix) {
  var sampleSize = sampleMatrix.length().get([0])
  var onesVector = ee.Array(ee.List.repeat(1,sampleSize))
    .reshape([1,sampleSize]);
  var sampleMean  = onesVector
    .matrixMultiply(sampleMatrix)
    .divide(sampleSize);
  return sampleMean
}

var getSampleCovariance = function(sampleMatrix, sampleMean) {
  var sampleSize = sampleMatrix.length().get([0])
  var sampleDeviation = sampleMatrix
    .subtract(sampleMean.repeat(0,sampleSize));
  var sampleCovariance = sampleDeviation
    .transpose()
    .matrixMultiply(sampleDeviation)
    .divide(sampleSize.subtract(1));
  return sampleCovariance
}

var getSampleCorrelation = function(sampleCovariance) {
  var D = sampleCovariance
    .matrixDiagonal()
    .sqrt()
    .matrixToDiag();
  var sampleCorrelation = D
    .matrixInverse()
    .matrixMultiply(sampleCovariance)
    .matrixMultiply(D.matrixInverse());
  return sampleCorrelation;
};

var getSampleEigens = function(sampleCovariance) {
  var sampleEigens = sampleCovariance.eigen();
  var sampleEigenValues = sampleEigens.slice(1, 0, 1);
  var sampleEigenVectors = sampleEigens.slice(1, 1);
  return ee.Dictionary({
    eigenValues: sampleEigenValues,
    eigenVectors: sampleEigenVectors
  });
};

var getCenteredImage = function(image, sampleMean) {
  var numBands = image.bandNames().size();
  return ee.ImageCollection.fromImages(
    ee.List.sequence(0, numBands.subtract(1)).map(function(i) {
      return image.select(ee.Number(i).int())
        .subtract(sampleMean.project([1]).get([i]));
    })).toBands();
};

var pcaFromSample = function(image, Dict) {
  var getNewBandNames = function(img, prefix) {
    var seq = ee.List.sequence(1, img.bandNames().length());
      return seq.map(function(b) {
        return ee.String(prefix).cat(ee.Number(b).int());
      });
  };
  var numBands = image.bandNames().size();
  var sampleMatrix = getSampleMatrix(image, Dict)
  var outliers = findOutliers(sampleMatrix)
  var maskedImage = maskOutliers(image, outliers)
  var maskedSampleMatrix = getSampleMatrix(maskedImage, Dict)
  var sampleMean = getSampleMean(maskedSampleMatrix);
  var sampleCovariance = getSampleCovariance(maskedSampleMatrix, sampleMean);
  var sampleEigens = getSampleEigens(sampleCovariance);
  var sampleEigenValues = sampleEigens.getArray('eigenValues');
  var sampleEigenVectors = sampleEigens.getArray('eigenVectors');
  var centeredImage =  ee.ImageCollection.fromImages(
    ee.List.sequence(0, numBands.subtract(1)).map(function(i) {
      return image.select(ee.Number(i).int())
        .subtract(sampleMean.project([1]).get([i]));
    })).toBands();
  var centeredArrayImage = centeredImage.toArray().toArray(1);
  var eigenVectorImage = ee.Image(sampleEigenVectors);
  var pcImage = eigenVectorImage.matrixMultiply(centeredArrayImage);
  var sdImage = ee.Image(sampleEigenValues.sqrt())
    .arrayProject([0])
    .arrayFlatten([getNewBandNames(centeredImage, 'sd')]);
  return pcImage
    .arrayProject([0])
    .arrayFlatten([getNewBandNames(centeredImage, 'pc')])
    .divide(sdImage);
};

var pcaFromSample2 = function(centeredImage, sampleEigens) {
  var getNewBandNames = function(img, prefix) {
    var seq = ee.List.sequence(1, img.bandNames().length());
      return seq.map(function(b) {
        return ee.String(prefix).cat(ee.Number(b).int());
      });
  };
  var numBands = centeredImage.bandNames().size();
  var sampleEigenValues = sampleEigens.getArray('eigenValues');
  var sampleEigenVectors = sampleEigens.getArray('eigenVectors');
  var centeredArrayImage = centeredImage.toArray().toArray(1);
  var eigenVectorImage = ee.Image(sampleEigenVectors);
  var pcImage = eigenVectorImage.matrixMultiply(centeredArrayImage);
  var sdImage = ee.Image(sampleEigenValues.sqrt())
    .arrayProject([0])
    .arrayFlatten([getNewBandNames(centeredImage, 'sd')]);
  return pcImage
    .arrayProject([0])
    .arrayFlatten([getNewBandNames(centeredImage, 'pc')])
    .divide(sdImage);
};

exports.getSampleMatrix = getSampleMatrix;
exports.findOutliers = findOutliers;
exports.maskOutliers = maskOutliers;
exports.getSampleMean = getSampleMean;
exports.getSampleCovariance = getSampleCovariance;
exports.getSampleCorrelation = getSampleCorrelation;
exports.getSampleEigens = getSampleEigens;
exports.getCenteredImage = getCenteredImage;
exports.pcaFromSample = pcaFromSample;
exports.pcaFromSample2 = pcaFromSample2;