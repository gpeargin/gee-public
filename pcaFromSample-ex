/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var naip = ee.ImageCollection("USDA/NAIP/DOQQ"),
    imageVisParam = {"opacity":1,"bands":["pc1","pc2","pc3"],"min":-0.015,"max":0.015,"gamma":1},
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-122.52767826211505, 37.954297005083056],
          [-122.52767826211505, 37.69351110422231],
          [-122.20220829141192, 37.69351110422231],
          [-122.20220829141192, 37.954297005083056]]], null, false),
    geometry2 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry.Point([-122.40333798254662, 37.787925744102175]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*  Copyright 2024 Greg Peargin

    Use of this source code is governed by an MIT-style
    license that can be found in the LICENSE file or at
    https://opensource.org/licenses/MIT.
*/

var pcaFromSample = require('users/gregpeargin/gee-public:pcaFromSample');

var images = naip
  .filterDate('2022-01-01', '2022-12-31')
  .filterBounds(geometry);

var projection = images.first().projection();

var mosaic = images
  .mosaic();

print('Mosaicked images', images);
print(
  'Mosaic area (sq km)',
  images
    .geometry()
    .area({maxError: 10, proj: projection.atScale(1000)})
);

var sample = mosaic.sample({
  numPixels: 5000,
  region: geometry,
  projection: projection
});

var pca = pcaFromSample.pcaFromSample(mosaic, sample);

Map.centerObject(geometry2, 15);
Map.addLayer(mosaic, [], 'mosaic');
Map.addLayer(pca, imageVisParam, 'pca');